{"version":3,"sources":["donation_wechat.jpg","wechat_group_qr.jpg","wechat_qr.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","statusMap","Map","getColor","s","Immutable","get","ColorHash","hex","App","selectedForm","URL","window","location","href","searchParams","selectedCenter","useState","selectedUpdateDay","setSelectedUpdateDay","caseData","setCaseData","mode","includes","setSearchParam","key","value","url","set","search","toString","useEffect","a","JSON5","fetch","text","parse","entries","useMemo","List","Object","flatMap","counts","split","center","year","day","code","form","status","map","count","updateDay","groupBy","v","toList","toArray","lodash","selectedEntriesAllDate","filter","e","availableUpdateDays","Number","parseInt","toSet","sort","latestUpdateDay","max","selectedEntries","formTypes","centerNames","statusCount","countBy","x","existStatus","sortBy","exisitDays","dataset","reduce","counter","toObject","b","previousDayCount","size","todayCount","datasetWithBackfill","find","maxBarHeight","valueSeq","barChart","height","width","data","layout","strokeDasharray","type","dataKey","domain","tickFormatter","padStart","min","tick","fontSize","interval","allowDecimals","ticks","offset","content","payload","label","todayTotal","prevdayTotal","style","backgroundColor","p","prevDay","color","fill","marginBottom","toFixed","itemSorter","indexOf","nullthrows","ind","isAnimationActive","stackId","introduction","Date","toDateString","target","rel","updateDayPicker","Grid","item","xs","Slider","marginLeft","marginRight","defaultValue","onChange","_","f","aria-labelledby","valueLabelDisplay","step","marks","getMonth","getDate","QA","alt","src","WeChatDonation","WechatQR","WechatGroupQR","facebookCommentPlugin","appId","formTypeSelector","FormControl","fullWidth","component","FormLabel","RadioGroup","aria-label","name","row","FormControlLabel","control","Radio","centerSelector","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48c1b6f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/donation_wechat.84e04efe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wechat_group_qr.b70b83ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wechat_qr.6a2dd925.jpg\";","import ColorHash from \"color-hash\";\nimport Immutable from \"immutable\";\nimport JSON5 from \"json5\";\nimport nullthrows from \"nullthrows\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport * as lodash from \"lodash\";\n\n// @ts-ignore\nimport { Comments, FacebookProvider } from \"react-facebook\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  ContentRenderer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  TooltipProps,\n} from \"recharts\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Slider from \"@material-ui/core/Slider\";\n\nimport WeChatDonation from \"./donation_wechat.jpg\";\nimport WechatGroupQR from \"./wechat_group_qr.jpg\";\nimport WechatQR from \"./wechat_qr.jpg\";\n\nconst JSON5_URL =\n  \"https://raw.githubusercontent.com/vicdus/uscis-case-statistics/master/src/data.json5\";\nconst JSON5_485_URL =\n  \"https://raw.githubusercontent.com/vicdus/uscis-case-statistics/master/src/data485.json5\";\n\nconst statusMap = new Map([\n  [\"Case Was Approved And My Decision Was Emailed\", \"Case Was Approved\"],\n  [\"Case Was Received and A Receipt Notice Was Emailed\", \"Case Was Received\"],\n  [\n    \"Request for Initial Evidence Was Sent\",\n    \"Request for Additional Evidence Was Sent\",\n  ],\n  [\n    \"Case Was Transferred And A New Office Has Jurisdiction\",\n    \"Case Transferred And New Office Has Jurisdiction\",\n  ],\n]);\n\nfunction getColor(s: string): string {\n  return (\n    Immutable.Map([\n      [\"Case Was Received\", \"#999900\"],\n      [\"Case Was Approved\", \"#00FF00\"],\n      [\"Request for Additional Evidence Was Sent\", \"#FF0000\"],\n    ]).get(s) ?? new ColorHash().hex(s)\n  );\n}\n\nconst App: React.FC<{}> = () => {\n  const selectedForm =\n    new URL(window.location.href).searchParams.get(\"form\") ?? \"I-129\";\n  const selectedCenter =\n    new URL(window.location.href).searchParams.get(\"center\") ?? \"WAC\";\n  const [selectedUpdateDay, setSelectedUpdateDay] = useState<string | null>(\n    null\n  );\n  const [caseData, setCaseData] = useState<Object>({});\n\n  const mode = [\"I-485\", \"I-140\"].includes(selectedForm) ? '485' : 'normal';\n\n  const setSearchParam = (key: string, value: string) => {\n    const url = new URL(window.location.href);\n    const searchParams = url.searchParams;\n    searchParams.set(key, value);\n    url.search = searchParams.toString();\n    window.location.href = url.toString();\n  };\n\n  const url = new URL(window.location.href);\n\n  useEffect(() => {\n    (async () => {\n      if (!url.searchParams.get(\"form\")) {\n        setSearchParam(\"form\", \"I-129\");\n      }\n      if (!url.searchParams.get(\"center\")) {\n        setSearchParam(\"center\", \"WAC\");\n      }\n      setCaseData(JSON5.parse(await (await fetch(mode === '485' ? JSON5_485_URL : JSON5_URL)).text()));\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const entries = useMemo(() => {\n    return Immutable.List(\n      Object.entries(caseData).flatMap(([key, counts]) => {\n        const [center, year, day, code, form, status] = key.split(\"|\");\n        return Object.entries(counts).map((count) => {\n          return {\n            center,\n            year,\n            day,\n            code,\n            form,\n            status,\n            updateDay: count[0] as string,\n            count: count[1] as number,\n          };\n        });\n      })\n    )\n      .groupBy(\n        (v) =>\n          v.center +\n          v.year +\n          v.day +\n          v.code +\n          v.form +\n          (statusMap.get(v.status) ?? v.status) +\n          v.updateDay\n      )\n      .map((v) => v.toList().toArray())\n      .map((v) => {\n        return {\n          center: v[0].center,\n          year: v[0].year,\n          day: v[0].day,\n          code: v[0].code,\n          form: v[0].form,\n          status: statusMap.get(v[0].status) ?? v[0].status,\n          updateDay: v[0].updateDay,\n          count: lodash.sumBy(v, (v) => v.count) as number,\n        };\n      })\n      .toList();\n  }, [caseData]);\n\n  const selectedEntriesAllDate = useMemo(\n    () =>\n      entries.filter(\n        (e) => e.form === selectedForm && e.center === selectedCenter\n      ),\n    [entries, selectedForm, selectedCenter]\n  );\n\n  const availableUpdateDays = useMemo(\n    () =>\n      selectedEntriesAllDate\n        .map((e) => Number.parseInt(e.updateDay))\n        .toSet()\n        .toList()\n        .sort(),\n    [selectedEntriesAllDate]\n  );\n\n\n  const latestUpdateDay = useMemo(\n    () => selectedEntriesAllDate.map((e) => Number.parseInt(e.updateDay)).max(),\n    [selectedEntriesAllDate]\n  );\n\n  const selectedEntries = useMemo(\n    () =>\n      selectedEntriesAllDate.filter(\n        (e) =>\n          e.updateDay === (selectedUpdateDay ?? latestUpdateDay)?.toString()\n      ),\n    [selectedEntriesAllDate, selectedUpdateDay, latestUpdateDay]\n  );\n\n  const formTypes = useMemo(() => entries.map((e) => e.form).toSet(), [\n    entries,\n  ]);\n  const centerNames = useMemo(() => entries.map((e) => e.center).toSet(), [\n    entries,\n  ]);\n\n  const statusCount = useMemo(\n    () => selectedEntriesAllDate.countBy((x) => x.status),\n    [selectedEntriesAllDate]\n  );\n  const existStatus = useMemo(\n    () =>\n      selectedEntriesAllDate\n        .map((e) => e.status)\n        .toSet()\n        .toList()\n        .sortBy((s) => -(statusCount.get(s) ?? 0)),\n    [selectedEntriesAllDate, statusCount]\n  );\n\n  const exisitDays = useMemo(\n    () =>\n      selectedEntriesAllDate\n        .map((e) => Number.parseInt(e.day))\n        .toSet()\n        .toList()\n        .sort(),\n    [selectedEntriesAllDate]\n  );\n\n  const dataset = useMemo(\n    () =>\n      selectedEntries\n        .groupBy((e) => e.day)\n        .map((e, day) => {\n          return {\n            day,\n            ...e\n              .reduce(\n                (counter, v) => counter.set(v.status, v.count),\n                Immutable.Map<string, number>()\n              )\n              .toObject(),\n          };\n        })\n        .toList()\n        .sort((a, b) => Number.parseInt(a.day) - Number.parseInt(b.day))\n        .toArray(),\n    [selectedEntries]\n  );\n\n  const previousDayCount = useMemo(\n    () =>\n      selectedEntriesAllDate\n        .filter(\n          (v) =>\n            v.updateDay ===\n            availableUpdateDays.get(availableUpdateDays.size - 2)?.toString()\n        )\n        .groupBy((v) => v.day)\n        .map((v) =>\n          Immutable.Map(\n            // @ts-ignore\n            v.map((x) => [x.status.toString(), x.count]).toArray()\n          )\n        ),\n    [availableUpdateDays, selectedEntriesAllDate]\n  );\n\n  const todayCount = useMemo(\n    () =>\n      selectedEntriesAllDate\n        .filter(\n          (v) =>\n            v.updateDay ===\n            availableUpdateDays.get(availableUpdateDays.size - 1)?.toString()\n        )\n        .groupBy((v) => v.day)\n        .map((v) =>\n          Immutable.Map(\n            // @ts-ignore\n            v.map((x) => [x.status.toString(), x.count]).toArray()\n          )\n        ),\n    [availableUpdateDays, selectedEntriesAllDate]\n  );\n\n  const datasetWithBackfill = useMemo(\n    () =>\n      exisitDays\n        .map(\n          (day) =>\n            dataset.find((v) => v.day === day.toString()) ?? {\n              day: day.toString(),\n            }\n        )\n        .toArray(),\n    [exisitDays, dataset]\n  );\n\n  const maxBarHeight = useMemo(\n    () =>\n      todayCount.valueSeq().map(v => lodash.sum(v.valueSeq().toArray())).max(),\n    [todayCount]\n  );\n\n  const barChart = useMemo(() => {\n    const CustomTooltip: ContentRenderer<TooltipProps> = ({\n      payload,\n      label,\n    }) => {\n      const todayTotal =\n        todayCount\n          .get(label as string)\n          ?.reduce((a, b) => a + (b as number), 0) ?? 1;\n      const prevdayTotal =\n        previousDayCount\n          .get(label as string)\n          ?.reduce((a, b) => a + (b as number), 0) ?? 1;\n\n      return (\n        <div style={{ backgroundColor: \"#F0F8FF\" }}>\n          <p>{`${label}`}</p>\n          {(payload ?? []).map((p) => {\n            const prevDay = (previousDayCount\n              .get(label as string)\n              ?.get(p.dataKey as string) ?? 0) as number;\n            return (\n              <p style={{ color: p.fill, marginBottom: \"3px\" }}>{`${p.dataKey\n                }: ${p.value} of ${todayTotal} (${(\n                  (100 * (p.value as number)) /\n                  todayTotal\n                ).toFixed(\n                  2\n                )}%), Previous day: ${prevDay} of ${prevdayTotal},  (${(\n                  (100 * prevDay) /\n                  prevdayTotal\n                ).toFixed(2)}%)`}</p>\n            );\n          })}\n        </div>\n      );\n    };\n\n    return (\n      <BarChart\n        height={1440}\n        width={810}\n        data={datasetWithBackfill}\n        layout=\"vertical\"\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          type=\"number\"\n          dataKey=\"day\"\n          domain={[0, maxBarHeight ?? 1]}\n        />\n        <YAxis\n          type=\"category\"\n          dataKey=\"day\"\n          width={150}\n          tickFormatter={day => mode === '485' ? selectedCenter + \"219\" + day.toString().padStart(3, \"0\") + \"XXXX\" : selectedCenter + \"21\" + day.toString().padStart(3, \"0\") + \"5XXXX\"}\n          domain={[(exisitDays.min() ?? 0) - 1, (exisitDays.max() ?? 1) + 1]}\n          tick={{ fontSize: \"x-small\" }}\n          interval={0}\n          allowDecimals={true}\n          ticks={exisitDays.toArray()}\n        />\n        <Tooltip\n          offset={100}\n          content={CustomTooltip}\n          itemSorter={(a) =>\n            -existStatus.indexOf(nullthrows(a.dataKey) as string)\n          }\n        />\n        {existStatus.toArray().map((s, ind) => (\n          <Bar\n            key={ind}\n            isAnimationActive={false}\n            dataKey={s}\n            stackId=\"a\"\n            fill={getColor(s)}\n          />\n        ))}\n      </BarChart>\n    );\n  }, [datasetWithBackfill, maxBarHeight, exisitDays, existStatus, todayCount, previousDayCount, selectedCenter, mode]);\n\n  const introduction = (\n    <div>\n      <h1>USCIS case progress tracker</h1>\n      <p>\n        Current Form: <strong>{selectedForm}</strong>,<br /> location:{\" \"}\n        <strong>{selectedCenter}</strong> ,<br /> Last Update for this form and\n        location:\n        <strong>\n          {latestUpdateDay\n            ? new Date(\n              86400000 * latestUpdateDay + 3600 * 1000 * 7\n            ).toDateString()\n            : \"Not Exist currently\"}\n        </strong>\n      </p>\n      <h3>Help needed for UI and clawer</h3>\n      <p>\n        GitHub project:\n        <a\n          href=\"https://github.com/vicdus/uscis-case-statistics/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://github.com/vicdus/uscis-case-statistics/\n        </a>\n      </p>\n    </div>\n  );\n\n  const updateDayPicker = availableUpdateDays.max() ? (\n    <Grid item xs={8}>\n      <Slider\n        style={{ marginLeft: \"128px\", marginRight: \"128px\" }}\n        defaultValue={availableUpdateDays.max() ?? 1}\n        onChange={(_, f) => setSelectedUpdateDay(f.toString())}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"off\"\n        step={null}\n        marks={availableUpdateDays\n          .map((e) => ({\n            value: e,\n            label:\n              1 +\n              new Date(86400000 * e + 3600 * 1000 * 7).getMonth() +\n              \"/\" +\n              new Date(86400000 * e + 3600 * 1000 * 7).getDate(),\n          }))\n          .toArray()}\n        min={availableUpdateDays.min() ?? 0}\n        max={availableUpdateDays.max() ?? 1}\n      />\n    </Grid>\n  ) : null;\n\n  const QA = (\n    <div>\n      <h3>Q and A</h3>\n      <h4>Q: 怎么用？</h4>\n      <p>A: 横坐标是号段，纵坐标是状态对应的数量。</p>\n      <h4>Q: 什么是号段？</h4>\n      <p>A: 这张图里的working day number</p>\n      <img\n        alt=\"day-explain\"\n        src=\"https://www.am22tech.com/wp-content/uploads/2018/12/uscis-receipt-number-status-i797-notice-truvisa.jpg\"\n      />\n      <h4>Q: 你是谁？</h4>\n      <p>A: 我今年抽中了h1b, 在等approve</p>\n      <h4>Q: 数据来源？</h4>\n      <p>A: 枚举号段下所有可能的case number并爬取USCIS, 保存成文件</p>\n      <h4>Q: 没有我的号段的数据？</h4>\n      <p>A: 可能需要地里大家一起来爬并更新，稍后放出步骤</p>\n      <h4>Q: 一般什么时候更新数据？</h4>\n      <p>\n        A:\n        通常美西第二天凌晨更新前一个工作日的数据，取决于uscis是否抽风以及我晚上是否喝大了忘记跑更新脚本（手动狗头\n      </p>\n      <h4>Q: 为什么是文件？为什么不用数据库？</h4>\n      <p>A: 贫穷, github deploy静态网页不要钱</p>\n      <h4>Q: 这个很有用，可以请你喝杯咖啡吗？</h4>\n      <p>A: 感谢！</p>\n      <img\n        src={WeChatDonation}\n        alt=\"wechat_donation\"\n        style={{ width: \"400px\", height: \"560px\" }}\n      />\n\n      <h4>Q: 我想和你聊一聊？</h4>\n      <p>A: 加我微信吧！</p>\n      <img\n        src={WechatQR}\n        alt=\"wechat\"\n        style={{ width: \"400px\", height: \"560px\" }}\n      />\n      <h4>Q: 还有别的问题想讨论？</h4>\n      <p>\n        A: 微信群和\n        <a\n          href=\"https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=636011\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          一亩三分地的帖子\n        </a>\n        ，请帮我加点大米：）\n      </p>\n      <img\n        src={WechatGroupQR}\n        alt=\"wechat_group\"\n        style={{ width: \"400px\", height: \"560px\" }}\n      />\n    </div>\n  );\n\n  const facebookCommentPlugin = (\n    <FacebookProvider appId=\"185533902045623\">\n      <Comments href=\"https://vicdus.github.io/uscis-case-statistics/\" />\n    </FacebookProvider>\n  );\n\n  const formTypeSelector = (\n    <FormControl fullWidth={true} component=\"fieldset\">\n      <FormLabel component=\"legend\">Form Type</FormLabel>\n      <RadioGroup\n        aria-label=\"form\"\n        name=\"form\"\n        value={selectedForm}\n        onChange={(e) => setSearchParam(\"form\", e.target.value)}\n        row={true}\n      >\n        {formTypes\n          .toArray()\n          .sort()\n          .map((f, ind) => (\n            <FormControlLabel\n              key={ind}\n              value={f}\n              control={<Radio />}\n              label={f}\n            />\n          ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  const centerSelector = (\n    <FormControl fullWidth={true} component=\"fieldset\">\n      <FormLabel component=\"legend\">Center</FormLabel>\n      <RadioGroup\n        aria-label=\"form\"\n        name=\"form\"\n        value={selectedCenter}\n        onChange={(e) => setSearchParam(\"center\", e.target.value)}\n        row={true}\n      >\n        {centerNames\n          .toArray()\n          .sort()\n          .map((f, ind) => (\n            <FormControlLabel\n              key={ind}\n              value={f}\n              control={<Radio />}\n              label={f}\n            />\n          ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  return (\n    <div>\n      {introduction}\n      {formTypeSelector}\n      {centerSelector}\n      {updateDayPicker}\n      {barChart}\n      {updateDayPicker}\n      {QA}\n      {facebookCommentPlugin}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}