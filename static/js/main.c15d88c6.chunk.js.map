{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getColor","s","Immutable","Map","of","get","ColorHash","hex","App","entires","List","Object","entries","data","map","key","count","split","center","year","day","code","form","status","timestamp","existStatus","Set","dataset","filter","e","groupBy","temp","forEach","x","add","set","fromEntries","toList","sort","a","b","Number","parseInt","toArray","chart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","offset","itemSorter","payload","nullthrows","toString","type","stroke","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+2qBAeA,SAASA,EAASC,GAAoB,IAAD,EACnC,iBACEC,IAAUC,IAAIC,GACZ,oBACA,UACA,oBACA,WACAC,IAAIJ,UANR,SAMc,IAAIK,KAAYC,IAAIN,GAqErBO,MAjEf,WACE,IAAMC,EAAUP,IAAUQ,KACxBC,OAAOC,QAAQC,GAAMC,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,OACkBD,EAAIE,MAAM,KAD5B,mBAEzC,MAAO,CACLC,OAHuC,KAIvCC,KAJuC,KAKvCC,IALuC,KAMvCC,KANuC,KAOvCC,KAPuC,KAQvCC,OARuC,KASvCC,UATuC,KAUvCR,aAKAS,EAAc,IAAIC,IAElBC,EAAUlB,EACbmB,QAAO,SAACC,GAAD,MAAkB,UAAXA,EAAEP,QAChBQ,SAAQ,SAACD,GAAD,OAAOA,EAAET,OACjBN,KAAI,SAACe,EAAGT,GACP,IAAMW,EAAO,IAAI5B,IAKjB,OAJA0B,EAAEG,SAAQ,SAACC,GAAO,IAAD,EACfR,EAAYS,IAAID,EAAEV,QAClBQ,EAAKI,IAAIF,EAAEV,OAAQU,EAAEjB,OAAF,UAAWe,EAAK1B,IAAI4B,EAAEV,eAAtB,QAAiC,OAE/C,aAAEH,IAAKA,GAAQT,OAAOyB,YAAYL,OAE1CM,SACAC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,OAAOC,SAASH,EAAEnB,KAAOqB,OAAOC,SAASF,EAAEpB,QAC1DuB,UAEGC,EACJ,kBAAC,IAAD,CACEC,MAAO,KACPC,OAAQ,IACRjC,KAAMc,EACNoB,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,QACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,OAAQ,IACRC,WAAY,SAAChB,GAAD,aAAQA,EAAEiB,QAAQC,IAAU,UAAClB,EAAEc,eAAH,aAAC,EAAWK,gBAEtD,kBAAC,IAAD,MACCxD,IAAUwB,IAAID,GACZkB,UACA7B,KAAI,SAACb,GAAD,OACH,kBAAC,IAAD,CAAM0D,KAAK,SAASN,QAASpD,EAAG2D,OAAQ5D,EAASC,SAKzD,OAAO,6BAAM2C,IC5EKiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c15d88c6.chunk.js","sourcesContent":["import React from \"react\";\nimport data from \"./data.json\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Legend,\n  Tooltip,\n} from \"recharts\";\nimport ColorHash from \"color-hash\";\nimport nullthrows from \"nullthrows\";\nimport Immutable from \"immutable\";\n\nfunction getColor(s: string): string {\n  return (\n    Immutable.Map.of(\n      \"Case Was Received\",\n      \"#999900\",\n      \"Case Was Approved\",\n      \"#00FF00\"\n    ).get(s) ?? new ColorHash().hex(s)\n  );\n}\n\nfunction App() {\n  const entires = Immutable.List(\n    Object.entries(data).map(([key, count]) => {\n      const [center, year, day, code, form, status, timestamp] = key.split(\"|\");\n      return {\n        center,\n        year,\n        day,\n        code,\n        form,\n        status,\n        timestamp,\n        count,\n      };\n    })\n  );\n\n  const existStatus = new Set<string>();\n\n  const dataset = entires\n    .filter((e) => e.form === \"I-129\")\n    .groupBy((e) => e.day)\n    .map((e, day) => {\n      const temp = new Map<string, number>();\n      e.forEach((x) => {\n        existStatus.add(x.status);\n        temp.set(x.status, x.count + (temp.get(x.status) ?? 0));\n      });\n      return { day: day, ...Object.fromEntries(temp) };\n    })\n    .toList()\n    .sort((a, b) => Number.parseInt(a.day) - Number.parseInt(b.day))\n    .toArray();\n\n  const chart = (\n    <LineChart\n      width={1440}\n      height={810}\n      data={dataset}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray='3 3' />\n      <XAxis dataKey='day' />\n      <YAxis />\n      <Tooltip\n        offset={100}\n        itemSorter={(a) => -a.payload[nullthrows(a.dataKey?.toString())]}\n      />\n      <Legend />\n      {Immutable.Set(existStatus)\n        .toArray()\n        .map((s) => (\n          <Line type='linear' dataKey={s} stroke={getColor(s)} />\n        ))}\n    </LineChart>\n  );\n\n  return <div>{chart}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}