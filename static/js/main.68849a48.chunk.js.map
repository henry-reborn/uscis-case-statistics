{"version":3,"sources":["donation_wechat.jpg","wechat_qr.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getColor","s","Immutable","Map","get","ColorHash","hex","App","selectedForm","URL","window","location","href","searchParams","selectedCenter","useState","selectedUpdateDay","setSelectedUpdateDay","caseData","setCaseData","setSearchParam","key","value","url","set","search","toString","useEffect","a","JSON5","fetch","text","parse","entires","List","Object","entries","flatMap","counts","split","center","year","day","code","form","status","map","count","updateDay","selectedEntriesAllDate","filter","e","availableUpdateDays","Number","parseInt","toSet","toList","sort","countValueForAllDays","latestUpdateDay","max","selectedEntries","formTypes","centerNames","statusCount","countBy","x","existStatus","sortBy","exisitDays","dataset","groupBy","reduce","counter","v","toObject","b","toArray","datasetWithBackfill","find","chart","width","height","data","strokeDasharray","dataKey","type","domain","offset","itemSorter","payload","nullthrows","ind","isAnimationActive","stroke","barChart","layout","tick","interval","ticks","lodash","range","min","indexOf","stackId","fill","introduction","Date","toDateString","target","rel","updateDayPicker","Grid","item","xs","Slider","style","marginLeft","marginRight","defaultValue","onChange","_","f","aria-labelledby","valueLabelDisplay","step","marks","label","getMonth","getDate","QA","alt","src","WeChatDonation","WechatQR","facebookCommentPlugin","appId","formTypeSelector","FormControl","fullWidth","component","FormLabel","RadioGroup","aria-label","name","row","FormControlLabel","control","Radio","centerSelector","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68849a48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/donation_wechat.84e04efe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wechat_qr.6a2dd925.jpg\";","import ColorHash from \"color-hash\";\nimport Immutable from \"immutable\";\nimport JSON5 from \"json5\";\nimport nullthrows from \"nullthrows\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { Comments, FacebookProvider } from \"react-facebook\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nimport lodash from \"lodash\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Slider from \"@material-ui/core/Slider\";\n\nimport WeChatDonation from \"./donation_wechat.jpg\";\nimport WechatQR from \"./wechat_qr.jpg\";\n\nconst JSON5_URL =\n  \"https://raw.githubusercontent.com/vicdus/uscis-case-statistics/master/src/data.json5\";\n\nfunction getColor(s: string): string {\n  return (\n    Immutable.Map([\n      [\"Case Was Received\", \"#999900\"],\n      [\"Case Was Approved\", \"#00FF00\"],\n      [\"Request for Additional Evidence Was Sent\", \"#FF0000\"],\n    ]).get(s) ?? new ColorHash().hex(s)\n  );\n}\n\nfunction App() {\n  const selectedForm =\n    new URL(window.location.href).searchParams.get(\"form\") ?? \"I-129\";\n  const selectedCenter =\n    new URL(window.location.href).searchParams.get(\"center\") ?? \"WAC\";\n  const [selectedUpdateDay, setSelectedUpdateDay] = useState<string | null>(\n    null\n  );\n  const [caseData, setCaseData] = useState<Object>({});\n\n  const setSearchParam = (key: string, value: string) => {\n    const url = new URL(window.location.href);\n    const searchParams = url.searchParams;\n    searchParams.set(key, value);\n    url.search = searchParams.toString();\n    window.location.href = url.toString();\n  };\n\n  const url = new URL(window.location.href);\n\n  useEffect(() => {\n    (async () => {\n      if (!url.searchParams.get(\"form\")) {\n        setSearchParam(\"form\", \"I-129\");\n      }\n      if (!url.searchParams.get(\"center\")) {\n        setSearchParam(\"center\", \"WAC\");\n      }\n      setCaseData(JSON5.parse(await (await fetch(JSON5_URL)).text()));\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const entires = Immutable.List(\n    Object.entries(caseData).flatMap(([key, counts]) => {\n      const [center, year, day, code, form, status] = key.split(\"|\");\n      return Object.entries(counts).map((count) => {\n        return {\n          center,\n          year,\n          day,\n          code,\n          form,\n          status,\n          updateDay: count[0] as string,\n          count: count[1] as number,\n        };\n      });\n    })\n  );\n\n  const selectedEntriesAllDate = entires.filter(\n    (e) => e.form === selectedForm && e.center === selectedCenter\n  );\n  const availableUpdateDays = selectedEntriesAllDate\n    .map((e) => Number.parseInt(e.updateDay))\n    .toSet()\n    .toList()\n    .sort();\n\n  const countValueForAllDays = selectedEntriesAllDate\n    .map((e) => e.count)\n    .toSet()\n    .toList()\n    .sort();\n\n  const latestUpdateDay = selectedEntriesAllDate\n    .map((e) => Number.parseInt(e.updateDay))\n    .max();\n\n  const selectedEntries = selectedEntriesAllDate.filter(\n    (e) => e.updateDay === (selectedUpdateDay ?? latestUpdateDay)?.toString()\n  );\n\n  const formTypes = entires.map((e) => e.form).toSet();\n  const centerNames = entires.map((e) => e.center).toSet();\n\n  const statusCount = selectedEntriesAllDate.countBy((x) => x.status);\n  const existStatus = selectedEntriesAllDate\n    .map((e) => e.status)\n    .toSet()\n    .toList()\n    .sortBy((s) => -(statusCount.get(s) ?? 0));\n\n  const exisitDays = selectedEntriesAllDate\n    .map((e) => Number.parseInt(e.day))\n    .toSet()\n    .toList()\n    .sort();\n\n  const dataset = selectedEntries\n    .groupBy((e) => e.day)\n    .map((e, day) => {\n      return {\n        day,\n        ...e\n          .reduce(\n            (counter, v) => counter.set(v.status, v.count),\n            Immutable.Map<string, number>()\n          )\n          .toObject(),\n      };\n    })\n    .toList()\n    .sort((a, b) => Number.parseInt(a.day) - Number.parseInt(b.day))\n    .toArray();\n\n  const datasetWithBackfill = exisitDays\n    .map((day) => dataset.find((v) => v.day === day.toString()) ?? { day })\n    .toArray();\n\n  const chart = (\n    <LineChart width={1440} height={810} data={datasetWithBackfill}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"day\" />\n      <YAxis\n        type=\"number\"\n        height={810}\n        domain={[0, countValueForAllDays.max() ?? 1]}\n      />\n      <Tooltip\n        offset={100}\n        itemSorter={(a) => -a.payload[nullthrows(a.dataKey?.toString())]}\n      />\n      {existStatus.toArray().map((s, ind) => (\n        <Line\n          key={ind}\n          type=\"linear\"\n          isAnimationActive={false}\n          dataKey={s}\n          stroke={getColor(s)}\n        />\n      ))}\n    </LineChart>\n  );\n\n  const barChart = (\n    <BarChart\n      height={1440}\n      width={810}\n      data={datasetWithBackfill}\n      layout=\"vertical\"\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        type=\"number\"\n        dataKey=\"day\"\n        domain={[0, countValueForAllDays.max() ?? 1]}\n      />\n      <YAxis\n        dataKey=\"day\"\n        domain={[140, 230]}\n        tick={true}\n        interval={0}\n        ticks={lodash.range(\n          exisitDays.min() as number,\n          (exisitDays.max() as number) + 1\n        )}\n      />\n      <Tooltip\n        offset={100}\n        itemSorter={(a) =>\n          -existStatus.indexOf(nullthrows(a.dataKey) as string)\n        }\n      />\n      {existStatus.toArray().map((s, ind) => (\n        <Bar\n          key={ind}\n          isAnimationActive={false}\n          dataKey={s}\n          stackId=\"a\"\n          fill={getColor(s)}\n        />\n      ))}\n    </BarChart>\n  );\n\n  const introduction = (\n    <div>\n      <h1>USCIS case progress tracker</h1>\n      <p>\n        Current Form: <strong>{selectedForm}</strong>,<br /> location:{\" \"}\n        <strong>{selectedCenter}</strong> ,<br /> Last Update for this form and\n        location:\n        <strong>\n          {latestUpdateDay\n            ? new Date(\n                86400000 * latestUpdateDay + 3600 * 1000 * 7\n              ).toDateString()\n            : \"Not Exist currently\"}\n        </strong>\n      </p>\n      <h3>Help needed for UI and clawer</h3>\n      <p>\n        GitHub project:\n        <a\n          href=\"https://github.com/vicdus/uscis-case-statistics/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://github.com/vicdus/uscis-case-statistics/\n        </a>\n      </p>\n    </div>\n  );\n\n  const updateDayPicker = availableUpdateDays.max() ? (\n    <Grid item xs={8}>\n      <Slider\n        style={{ marginLeft: \"128px\", marginRight: \"128px\" }}\n        defaultValue={availableUpdateDays.max() ?? 1}\n        onChange={(_, f) => setSelectedUpdateDay(f.toString())}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"off\"\n        step={null}\n        marks={availableUpdateDays\n          .map((e) => ({\n            value: e,\n            label:\n              1 +\n              new Date(86400000 * e + 3600 * 1000 * 7).getMonth() +\n              \"/\" +\n              new Date(86400000 * e + 3600 * 1000 * 7).getDate(),\n          }))\n          .toArray()}\n        min={availableUpdateDays.min() ?? 0}\n        max={availableUpdateDays.max() ?? 1}\n      />\n    </Grid>\n  ) : null;\n\n  const QA = (\n    <div>\n      <h3>Q and A</h3>\n      <h4>Q: 怎么用？</h4>\n      <p>A: 横坐标是号段，纵坐标是状态对应的数量。</p>\n      <h4>Q: 什么是号段？</h4>\n      <p>A: 这张图里的working day number</p>\n      <img\n        alt=\"day-explain\"\n        src=\"https://www.am22tech.com/wp-content/uploads/2018/12/uscis-receipt-number-status-i797-notice-truvisa.jpg\"\n      />\n      <h4>Q: 你是谁？</h4>\n      <p>A: 我今年抽中了h1b, 在等approve</p>\n      <h4>Q: 数据来源？</h4>\n      <p>A: 枚举号段下所有可能的case number并爬取USCIS, 保存成文件</p>\n      <h4>Q: 没有我的号段的数据？</h4>\n      <p>A: 可能需要地里大家一起来爬并更新，稍后放出步骤</p>\n      <h4>Q: 为什么是文件？为什么不用数据库？</h4>\n      <p>A: 贫穷</p>\n      <h4>Q: 这个很有用，可以请你喝杯咖啡吗？</h4>\n      <p>A: 感谢！</p>\n      <img\n        src={WeChatDonation}\n        alt=\"wechat_donation\"\n        style={{ width: \"400px\", height: \"560px\" }}\n      />\n\n      <h4>Q: 我想和你聊一聊？</h4>\n      <p>A: 加我微信吧！</p>\n      <img\n        src={WechatQR}\n        alt=\"wechat_donation\"\n        style={{ width: \"400px\", height: \"560px\" }}\n      />\n    </div>\n  );\n\n  const facebookCommentPlugin = (\n    <FacebookProvider appId=\"185533902045623\">\n      <Comments href=\"https://vicdus.github.io/uscis-case-statistics/\" />\n    </FacebookProvider>\n  );\n\n  const formTypeSelector = (\n    <FormControl fullWidth={true} component=\"fieldset\">\n      <FormLabel component=\"legend\">Form Type</FormLabel>\n      <RadioGroup\n        aria-label=\"form\"\n        name=\"form\"\n        value={selectedForm}\n        onChange={(e) => setSearchParam(\"form\", e.target.value)}\n        row={true}\n      >\n        {formTypes\n          .toArray()\n          .sort()\n          .map((f, ind) => (\n            <FormControlLabel\n              key={ind}\n              value={f}\n              control={<Radio />}\n              label={f}\n            />\n          ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  const centerSelector = (\n    <FormControl fullWidth={true} component=\"fieldset\">\n      <FormLabel component=\"legend\">Center</FormLabel>\n      <RadioGroup\n        aria-label=\"form\"\n        name=\"form\"\n        value={selectedCenter}\n        onChange={(e) => setSearchParam(\"center\", e.target.value)}\n        row={true}\n      >\n        {centerNames\n          .toArray()\n          .sort()\n          .map((f, ind) => (\n            <FormControlLabel\n              key={ind}\n              value={f}\n              control={<Radio />}\n              label={f}\n            />\n          ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  return (\n    <div>\n      {introduction}\n      {formTypeSelector}\n      {centerSelector}\n      {updateDayPicker}\n      {barChart}\n      {chart}\n      {updateDayPicker}\n\n      {QA}\n      {facebookCommentPlugin}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}