{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getColor","s","Immutable","Map","of","get","ColorHash","hex","App","useState","selectedForm","setSelectedForm","selectedCenter","setSelectedCenter","selectedUpdateDay","setSelectedUpdateDay","caseData","setCaseData","useEffect","a","fetch","json","entires","List","Object","entries","map","key","count","split","center","year","day","code","form","status","updateDay","selectedEntriesAllDate","filter","e","availableUpdateDays","Number","parseInt","toSet","toList","sort","latestUpdateDay","max","selectedEntries","toString","formTypes","centerNames","existStatus","dataset","groupBy","reduce","counter","v","set","toObject","b","toArray","chart","width","height","data","strokeDasharray","dataKey","offset","itemSorter","payload","nullthrows","ind","type","stroke","introduction","Date","toDateString","updateDayPicker","Grid","item","xs","Slider","style","marginLeft","marginRight","defaultValue","onChange","_","f","aria-labelledby","valueLabelDisplay","step","marks","value","label","min","QA","formTypeSelector","FormControl","fullWidth","component","FormLabel","RadioGroup","aria-label","name","target","FormControlLabel","control","Radio","centerSelector","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.228661f4.chunk.js","sourcesContent":["import ColorHash from \"color-hash\";\nimport Immutable from \"immutable\";\nimport nullthrows from \"nullthrows\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Slider from \"@material-ui/core/Slider\";\n\nconst JSON_URL =\n  \"https://raw.githubusercontent.com/vicdus/uscis-case-statistics/master/src/data.json\";\n\nfunction getColor(s: string): string {\n  return (\n    Immutable.Map.of(\n      \"Case Was Received\",\n      \"#999900\",\n      \"Case Was Approved\",\n      \"#00FF00\"\n    ).get(s) ?? new ColorHash().hex(s)\n  );\n}\n\nfunction App() {\n  const [selectedForm, setSelectedForm] = useState<string>(\"I-129\");\n  const [selectedCenter, setSelectedCenter] = useState<string>(\"WAC\");\n  const [selectedUpdateDay, setSelectedUpdateDay] = useState<string | null>(\n    null\n  );\n  const [caseData, setCaseData] = useState<Object>({});\n\n  useEffect(() => {\n    (async () => setCaseData(await (await fetch(JSON_URL)).json()))();\n  }, []);\n\n  const entires = Immutable.List(\n    Object.entries(caseData).map(([key, count]) => {\n      const [center, year, day, code, form, status, updateDay] = key.split(\"|\");\n      return {\n        center,\n        year,\n        day,\n        code,\n        form,\n        status,\n        updateDay,\n        count,\n      };\n    })\n  );\n\n  const selectedEntriesAllDate = entires.filter(\n    (e) => e.form === selectedForm && e.center === selectedCenter\n  );\n  const availableUpdateDays = selectedEntriesAllDate\n    .map((e) => Number.parseInt(e.updateDay))\n    .toSet()\n    .toList()\n    .sort();\n\n  const latestUpdateDay = selectedEntriesAllDate\n    .map((e) => Number.parseInt(e.updateDay))\n    .max();\n\n  const selectedEntries = selectedEntriesAllDate.filter(\n    (e) => e.updateDay === (selectedUpdateDay ?? latestUpdateDay)?.toString()\n  );\n\n  const formTypes = entires.map((e) => e.form).toSet();\n  const centerNames = entires.map((e) => e.center).toSet();\n  const existStatus = selectedEntries.map((e) => e.status).toSet();\n\n  const dataset = selectedEntries\n    .groupBy((e) => e.day)\n    .map((e, day) => {\n      return {\n        day,\n        ...e\n          .reduce(\n            (counter, v) => counter.set(v.status, v.count),\n            Immutable.Map<string, number>()\n          )\n          .toObject(),\n      };\n    })\n    .toList()\n    .sort((a, b) => Number.parseInt(a.day) - Number.parseInt(b.day))\n    .toArray();\n\n  const chart = (\n    <LineChart width={1440} height={810} data={dataset}>\n      <CartesianGrid strokeDasharray='3 3' />\n      <XAxis dataKey='day' />\n      <YAxis />\n      <Tooltip\n        offset={100}\n        itemSorter={(a) => -a.payload[nullthrows(a.dataKey?.toString())]}\n      />\n      <Legend />\n      {existStatus.toArray().map((s, ind) => (\n        <Line key={ind} type='linear' dataKey={s} stroke={getColor(s)} />\n      ))}\n    </LineChart>\n  );\n\n  const introduction = (\n    <div>\n      <h1>USCIS case progress tracker</h1>\n      <h2>\n        Current Form: {selectedForm}, location: {selectedCenter}, Last Update\n        for this form and location:{\" \"}\n        {new Date(1970, 0, latestUpdateDay).toDateString()}\n      </h2>\n      <h3>Help needed for UI and clawer</h3>\n      <p>GitHub project: https://github.com/vicdus/uscis-case-statistics/</p>\n    </div>\n  );\n\n  const updateDayPicker = availableUpdateDays.max() ? (\n    <Grid item xs={8}>\n      <Slider\n        style={{ marginLeft: \"128px\", marginRight: \"128px\" }}\n        defaultValue={availableUpdateDays.max() ?? 1}\n        onChange={(_, f) => setSelectedUpdateDay(f.toString())}\n        aria-labelledby='discrete-slider'\n        valueLabelDisplay='off'\n        step={1}\n        marks={availableUpdateDays\n          .map((e) => ({\n            value: e,\n            label: new Date(1970, 0, e).toDateString(),\n          }))\n          .toArray()}\n        min={availableUpdateDays.min() ?? 0}\n        max={availableUpdateDays.max() ?? 1}\n      />\n    </Grid>\n  ) : null;\n\n  const QA = (\n    <div>\n      <h3>Q and A</h3>\n      <h4>Q: 怎么用？</h4>\n      <p>A: 横坐标是号段，纵坐标是状态对应的数量。</p>\n      <h4>Q: 你是谁？</h4>\n      <p>A: 我今年抽中了h1b, 在等approve</p>\n      <h4>Q: 数据来源？</h4>\n      <p>A: 枚举号段下所有可能的case number并爬取USCIS, 保存成文件</p>\n      <h4>Q: 没有我的号段的数据？</h4>\n      <p>A: 可能需要地里大家一起来爬并更新，稍后放出步骤</p>\n      <h4>Q: 为什么是文件？为什么不用数据库？</h4>\n      <p>A: 穷、懒</p>\n    </div>\n  );\n\n  const formTypeSelector = (\n    <FormControl fullWidth={true} component='fieldset'>\n      <FormLabel component='legend'>Form Type</FormLabel>\n      <RadioGroup\n        aria-label='form'\n        name='form'\n        value={selectedForm}\n        onChange={(e) => setSelectedForm(e.target.value)}\n      >\n        {formTypes.toArray().map((f, ind) => (\n          <FormControlLabel key={ind} value={f} control={<Radio />} label={f} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  const centerSelector = (\n    <FormControl fullWidth={true} component='fieldset'>\n      <FormLabel component='legend'>Center</FormLabel>\n      <RadioGroup\n        aria-label='form'\n        name='form'\n        value={selectedCenter}\n        onChange={(e) => setSelectedCenter(e.target.value)}\n      >\n        {centerNames.toArray().map((f, ind) => (\n          <FormControlLabel key={ind} value={f} control={<Radio />} label={f} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n\n  return (\n    <div>\n      {introduction}\n      {updateDayPicker}\n      {chart}\n      {formTypeSelector}\n      {centerSelector}\n      {QA}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}